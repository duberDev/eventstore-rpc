// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_store.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EventStore.RPC {

  /// <summary>Holder for reflection information generated from event_store.proto</summary>
  public static partial class EventStoreReflection {

    #region Descriptor
    /// <summary>File descriptor for event_store.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventStoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFldmVudF9zdG9yZS5wcm90bxIKZXZlbnRzdG9yZSKiAQoVQXBwZW5kVG9T",
            "dHJlYW1SZXF1ZXN0EhEKCXN0cmVhbV9pZBgBIAEoCRIYChBleHBlY3RlZF92",
            "ZXJzaW9uGAIgASgFEiUKBmV2ZW50cxgDIAMoCzIVLmV2ZW50c3RvcmUuRXZl",
            "bnREYXRhEjUKEHVzZXJfY3JlZGVudGlhbHMYBCABKAsyGy5ldmVudHN0b3Jl",
            "LlVzZXJDcmVkZW50aWFscyKBAQoWQXBwZW5kVG9TdHJlYW1SZXNwb25zZRId",
            "ChVuZXh0X2V4cGVjdGVkX3ZlcnNpb24YASABKAMSJgoIcG9zaXRpb24YAiAB",
            "KAsyFC5ldmVudHN0b3JlLlBvc2l0aW9uEiAKBWVycm9yGAMgASgLMhEuZXZl",
            "bnRzdG9yZS5FcnJvciKBAQocU3Vic2NyaWJlVG9TdHJlYW1Gcm9tUmVxdWVz",
            "dBIRCglzdHJlYW1faWQYASABKAkSFwoPbGFzdF9jaGVja3BvaW50GAIgASgF",
            "EjUKEHVzZXJfY3JlZGVudGlhbHMYAyABKAsyGy5ldmVudHN0b3JlLlVzZXJD",
            "cmVkZW50aWFscyLgAwodU3Vic2NyaWJlVG9TdHJlYW1Gcm9tUmVzcG9uc2US",
            "KAoFZXZlbnQYASABKAsyGS5ldmVudHN0b3JlLlJlc29sdmVkRXZlbnQSSQoL",
            "ZHJvcF9yZWFzb24YAiABKA4yNC5ldmVudHN0b3JlLlN1YnNjcmliZVRvU3Ry",
            "ZWFtRnJvbVJlc3BvbnNlLkRyb3BSZWFzb24SIAoFZXJyb3IYAyABKAsyES5l",
            "dmVudHN0b3JlLkVycm9yIqcCCgpEcm9wUmVhc29uEhEKDVVzZXJJbml0aWF0",
            "ZWQQABIUChBOb3RBdXRoZW50aWNhdGVkEAESEAoMQWNjZXNzRGVuaWVkEAIS",
            "FAoQU3Vic2NyaWJpbmdFcnJvchADEg8KC1NlcnZlckVycm9yEAQSFAoQQ29u",
            "bmVjdGlvbkNsb3NlZBAFEhAKDENhdGNoVXBFcnJvchAGEhsKF1Byb2Nlc3Np",
            "bmdRdWV1ZU92ZXJmbG93EAcSGQoVRXZlbnRIYW5kbGVyRXhjZXB0aW9uEAgS",
            "GQoVTWF4U3Vic2NyaWJlcnNSZWFjaGVkEAkSIQodUGVyc2lzdGVudFN1YnNj",
            "cmlwdGlvbkRlbGV0ZWQQChILCgdVbmtub3duEGQSDAoITm90Rm91bmQQZSK9",
            "AQojQ3JlYXRlUGVyc2lzdGVudFN1YnNjcmlwdGlvblJlcXVlc3QSDgoGc3Ry",
            "ZWFtGAEgASgJEhEKCWdyb3VwTmFtZRgCIAEoCRI8CghzZXR0aW5ncxgDIAEo",
            "CzIqLmV2ZW50c3RvcmUuUGVyc2lzdGVudFN1YnNjcmlwdGlvblNldHRpbmdz",
            "EjUKEHVzZXJfY3JlZGVudGlhbHMYBCABKAsyGy5ldmVudHN0b3JlLlVzZXJD",
            "cmVkZW50aWFscyImCiRDcmVhdGVQZXJzaXN0ZW50U3Vic2NyaXB0aW9uUmVz",
            "cG9uc2UivQEKI1VwZGF0ZVBlcnNpc3RlbnRTdWJzY3JpcHRpb25SZXF1ZXN0",
            "Eg4KBnN0cmVhbRgBIAEoCRIRCglncm91cE5hbWUYAiABKAkSPAoIc2V0dGlu",
            "Z3MYAyABKAsyKi5ldmVudHN0b3JlLlBlcnNpc3RlbnRTdWJzY3JpcHRpb25T",
            "ZXR0aW5ncxI1ChB1c2VyX2NyZWRlbnRpYWxzGAQgASgLMhsuZXZlbnRzdG9y",
            "ZS5Vc2VyQ3JlZGVudGlhbHMiJgokVXBkYXRlUGVyc2lzdGVudFN1YnNjcmlw",
            "dGlvblJlc3BvbnNlIn8KI0RlbGV0ZVBlcnNpc3RlbnRTdWJzY3JpcHRpb25S",
            "ZXF1ZXN0Eg4KBnN0cmVhbRgBIAEoCRIRCglncm91cE5hbWUYAiABKAkSNQoQ",
            "dXNlcl9jcmVkZW50aWFscxgDIAEoCzIbLmV2ZW50c3RvcmUuVXNlckNyZWRl",
            "bnRpYWxzIiYKJERlbGV0ZVBlcnNpc3RlbnRTdWJzY3JpcHRpb25SZXNwb25z",
            "ZSKnAQomQ29ubmVjdFRvUGVyc2lzdGVudFN1YnNjcmlwdGlvblJlcXVlc3QS",
            "DgoGc3RyZWFtGAEgASgJEhEKCWdyb3VwTmFtZRgCIAEoCRI1ChB1c2VyX2Ny",
            "ZWRlbnRpYWxzGAMgASgLMhsuZXZlbnRzdG9yZS5Vc2VyQ3JlZGVudGlhbHMS",
            "EgoKYnVmZmVyU2l6ZRgEIAEoBRIPCgdhdXRvQWNrGAUgASgIIvQDCidDb25u",
            "ZWN0VG9QZXJzaXN0ZW50U3Vic2NyaXB0aW9uUmVzcG9uc2USKAoFZXZlbnQY",
            "ASABKAsyGS5ldmVudHN0b3JlLlJlc29sdmVkRXZlbnQSUwoLZHJvcF9yZWFz",
            "b24YAiABKA4yPi5ldmVudHN0b3JlLkNvbm5lY3RUb1BlcnNpc3RlbnRTdWJz",
            "Y3JpcHRpb25SZXNwb25zZS5Ecm9wUmVhc29uEiAKBWVycm9yGAMgASgLMhEu",
            "ZXZlbnRzdG9yZS5FcnJvciKnAgoKRHJvcFJlYXNvbhIRCg1Vc2VySW5pdGlh",
            "dGVkEAASFAoQTm90QXV0aGVudGljYXRlZBABEhAKDEFjY2Vzc0RlbmllZBAC",
            "EhQKEFN1YnNjcmliaW5nRXJyb3IQAxIPCgtTZXJ2ZXJFcnJvchAEEhQKEENv",
            "bm5lY3Rpb25DbG9zZWQQBRIQCgxDYXRjaFVwRXJyb3IQBhIbChdQcm9jZXNz",
            "aW5nUXVldWVPdmVyZmxvdxAHEhkKFUV2ZW50SGFuZGxlckV4Y2VwdGlvbhAI",
            "EhkKFU1heFN1YnNjcmliZXJzUmVhY2hlZBAJEiEKHVBlcnNpc3RlbnRTdWJz",
            "Y3JpcHRpb25EZWxldGVkEAoSCwoHVW5rbm93bhBkEgwKCE5vdEZvdW5kEGUi",
            "YgoJRXZlbnREYXRhEhAKCGV2ZW50X2lkGAEgASgMEhIKCmV2ZW50X3R5cGUY",
            "AiABKAkSDwoHaXNfanNvbhgDIAEoCBIMCgRkYXRhGAQgASgMEhAKCG1ldGFk",
            "YXRhGAUgASgMIjUKD1VzZXJDcmVkZW50aWFscxIQCgh1c2VybmFtZRgBIAEo",
            "CRIQCghwYXNzd29yZBgCIAEoCSI9CghQb3NpdGlvbhIXCg9jb21taXRfcG9z",
            "aXRpb24YASABKAMSGAoQcHJlcGFyZV9wb3NpdGlvbhgCIAEoAyIjCgVFcnJv",
            "chIMCgR0eXBlGAEgASgJEgwKBHRleHQYAiABKAkivQEKDVJlY29yZGVkRXZl",
            "bnQSFwoPZXZlbnRfc3RyZWFtX2lkGAEgASgJEhAKCGV2ZW50X2lkGAIgASgM",
            "EhQKDGV2ZW50X251bWJlchgDIAEoAxISCgpldmVudF90eXBlGAQgASgJEgwK",
            "BGRhdGEYBSABKAwSEAoIbWV0YWRhdGEYBiABKAwSDwoHaXNfanNvbhgHIAEo",
            "CBIPCgdjcmVhdGVkGAggASgDEhUKDWNyZWF0ZWRfZXBvY2gYCSABKAMiYQoN",
            "UmVzb2x2ZWRFdmVudBIoCgVldmVudBgBIAEoCzIZLmV2ZW50c3RvcmUuUmVj",
            "b3JkZWRFdmVudBImCghwb3NpdGlvbhgCIAEoCzIULmV2ZW50c3RvcmUuUG9z",
            "aXRpb24iggMKHlBlcnNpc3RlbnRTdWJzY3JpcHRpb25TZXR0aW5ncxIYChBy",
            "ZXNvbHZlX2xpbmtfdG9zGAEgASgIEhIKCnN0YXJ0X2Zyb20YAiABKAMSGAoQ",
            "ZXh0cmFfc3RhdGlzdGljcxgDIAEoCBIXCg9tZXNzYWdlX3RpbWVvdXQYBCAB",
            "KAESFwoPbWF4X3JldHJ5X2NvdW50GAUgASgFEhgKEGxpdmVfYnVmZmVyX3Np",
            "emUYBiABKAUSFwoPcmVhZF9iYXRjaF9zaXplGAcgASgFEhsKE2hpc3Rvcnlf",
            "YnVmZmVyX3NpemUYCCABKAUSGQoRY2hlY2tfcG9pbnRfYWZ0ZXIYCSABKAES",
            "HQoVbWluX2NoZWNrX3BvaW50X2NvdW50GAogASgFEh0KFW1heF9jaGVja19w",
            "b2ludF9jb3VudBgLIAEoBRIcChRtYXhfc3Vic2NyaWJlcl9jb3VudBgMIAEo",
            "BRIfChduYW1lZF9jb25zdW1lcl9zdHJhdGVneRgNIAEoCTKABgoKRXZlbnRT",
            "dG9yZRJZCg5BcHBlbmRUb1N0cmVhbRIhLmV2ZW50c3RvcmUuQXBwZW5kVG9T",
            "dHJlYW1SZXF1ZXN0GiIuZXZlbnRzdG9yZS5BcHBlbmRUb1N0cmVhbVJlc3Bv",
            "bnNlIgAScgoVU3Vic2NyaWJlVG9TdHJlYW1Gcm9tEiguZXZlbnRzdG9yZS5T",
            "dWJzY3JpYmVUb1N0cmVhbUZyb21SZXF1ZXN0GikuZXZlbnRzdG9yZS5TdWJz",
            "Y3JpYmVUb1N0cmVhbUZyb21SZXNwb25zZSIAKAEwARKDAQocQ3JlYXRlUGVy",
            "c2lzdGVudFN1YnNjcmlwdGlvbhIvLmV2ZW50c3RvcmUuQ3JlYXRlUGVyc2lz",
            "dGVudFN1YnNjcmlwdGlvblJlcXVlc3QaMC5ldmVudHN0b3JlLkNyZWF0ZVBl",
            "cnNpc3RlbnRTdWJzY3JpcHRpb25SZXNwb25zZSIAEoMBChxVcGRhdGVQZXJz",
            "aXN0ZW50U3Vic2NyaXB0aW9uEi8uZXZlbnRzdG9yZS5VcGRhdGVQZXJzaXN0",
            "ZW50U3Vic2NyaXB0aW9uUmVxdWVzdBowLmV2ZW50c3RvcmUuVXBkYXRlUGVy",
            "c2lzdGVudFN1YnNjcmlwdGlvblJlc3BvbnNlIgASgwEKHERlbGV0ZVBlcnNp",
            "c3RlbnRTdWJzY3JpcHRpb24SLy5ldmVudHN0b3JlLkRlbGV0ZVBlcnNpc3Rl",
            "bnRTdWJzY3JpcHRpb25SZXF1ZXN0GjAuZXZlbnRzdG9yZS5EZWxldGVQZXJz",
            "aXN0ZW50U3Vic2NyaXB0aW9uUmVzcG9uc2UiABKQAQofQ29ubmVjdFRvUGVy",
            "c2lzdGVudFN1YnNjcmlwdGlvbhIyLmV2ZW50c3RvcmUuQ29ubmVjdFRvUGVy",
            "c2lzdGVudFN1YnNjcmlwdGlvblJlcXVlc3QaMy5ldmVudHN0b3JlLkNvbm5l",
            "Y3RUb1BlcnNpc3RlbnRTdWJzY3JpcHRpb25SZXNwb25zZSIAKAEwAUI5ChJj",
            "b20uZXZlbnRzdG9yZS5ycGNCC0dSUENFU1Byb3RvUAGiAgJFU6oCDkV2ZW50",
            "U3RvcmUuUlBDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.AppendToStreamRequest), global::EventStore.RPC.AppendToStreamRequest.Parser, new[]{ "StreamId", "ExpectedVersion", "Events", "UserCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.AppendToStreamResponse), global::EventStore.RPC.AppendToStreamResponse.Parser, new[]{ "NextExpectedVersion", "Position", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.SubscribeToStreamFromRequest), global::EventStore.RPC.SubscribeToStreamFromRequest.Parser, new[]{ "StreamId", "LastCheckpoint", "UserCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.SubscribeToStreamFromResponse), global::EventStore.RPC.SubscribeToStreamFromResponse.Parser, new[]{ "Event", "DropReason", "Error" }, null, new[]{ typeof(global::EventStore.RPC.SubscribeToStreamFromResponse.Types.DropReason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.CreatePersistentSubscriptionRequest), global::EventStore.RPC.CreatePersistentSubscriptionRequest.Parser, new[]{ "Stream", "GroupName", "Settings", "UserCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.CreatePersistentSubscriptionResponse), global::EventStore.RPC.CreatePersistentSubscriptionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.UpdatePersistentSubscriptionRequest), global::EventStore.RPC.UpdatePersistentSubscriptionRequest.Parser, new[]{ "Stream", "GroupName", "Settings", "UserCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.UpdatePersistentSubscriptionResponse), global::EventStore.RPC.UpdatePersistentSubscriptionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.DeletePersistentSubscriptionRequest), global::EventStore.RPC.DeletePersistentSubscriptionRequest.Parser, new[]{ "Stream", "GroupName", "UserCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.DeletePersistentSubscriptionResponse), global::EventStore.RPC.DeletePersistentSubscriptionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.ConnectToPersistentSubscriptionRequest), global::EventStore.RPC.ConnectToPersistentSubscriptionRequest.Parser, new[]{ "Stream", "GroupName", "UserCredentials", "BufferSize", "AutoAck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.ConnectToPersistentSubscriptionResponse), global::EventStore.RPC.ConnectToPersistentSubscriptionResponse.Parser, new[]{ "Event", "DropReason", "Error" }, null, new[]{ typeof(global::EventStore.RPC.ConnectToPersistentSubscriptionResponse.Types.DropReason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.EventData), global::EventStore.RPC.EventData.Parser, new[]{ "EventId", "EventType", "IsJson", "Data", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.UserCredentials), global::EventStore.RPC.UserCredentials.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.Position), global::EventStore.RPC.Position.Parser, new[]{ "CommitPosition", "PreparePosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.Error), global::EventStore.RPC.Error.Parser, new[]{ "Type", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.RecordedEvent), global::EventStore.RPC.RecordedEvent.Parser, new[]{ "EventStreamId", "EventId", "EventNumber", "EventType", "Data", "Metadata", "IsJson", "Created", "CreatedEpoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.ResolvedEvent), global::EventStore.RPC.ResolvedEvent.Parser, new[]{ "Event", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.PersistentSubscriptionSettings), global::EventStore.RPC.PersistentSubscriptionSettings.Parser, new[]{ "ResolveLinkTos", "StartFrom", "ExtraStatistics", "MessageTimeout", "MaxRetryCount", "LiveBufferSize", "ReadBatchSize", "HistoryBufferSize", "CheckPointAfter", "MinCheckPointCount", "MaxCheckPointCount", "MaxSubscriberCount", "NamedConsumerStrategy" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AppendToStreamRequest : pb::IMessage<AppendToStreamRequest> {
    private static readonly pb::MessageParser<AppendToStreamRequest> _parser = new pb::MessageParser<AppendToStreamRequest>(() => new AppendToStreamRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppendToStreamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamRequest(AppendToStreamRequest other) : this() {
      streamId_ = other.streamId_;
      expectedVersion_ = other.expectedVersion_;
      events_ = other.events_.Clone();
      UserCredentials = other.userCredentials_ != null ? other.UserCredentials.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamRequest Clone() {
      return new AppendToStreamRequest(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private string streamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamId {
      get { return streamId_; }
      set {
        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_version" field.</summary>
    public const int ExpectedVersionFieldNumber = 2;
    private int expectedVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpectedVersion {
      get { return expectedVersion_; }
      set {
        expectedVersion_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::EventStore.RPC.EventData> _repeated_events_codec
        = pb::FieldCodec.ForMessage(26, global::EventStore.RPC.EventData.Parser);
    private readonly pbc::RepeatedField<global::EventStore.RPC.EventData> events_ = new pbc::RepeatedField<global::EventStore.RPC.EventData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EventStore.RPC.EventData> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 4;
    private global::EventStore.RPC.UserCredentials userCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.UserCredentials UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppendToStreamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppendToStreamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (ExpectedVersion != other.ExpectedVersion) return false;
      if(!events_.Equals(other.events_)) return false;
      if (!object.Equals(UserCredentials, other.UserCredentials)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
      if (ExpectedVersion != 0) hash ^= ExpectedVersion.GetHashCode();
      hash ^= events_.GetHashCode();
      if (userCredentials_ != null) hash ^= UserCredentials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamId);
      }
      if (ExpectedVersion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExpectedVersion);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (userCredentials_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
      }
      if (ExpectedVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpectedVersion);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (userCredentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppendToStreamRequest other) {
      if (other == null) {
        return;
      }
      if (other.StreamId.Length != 0) {
        StreamId = other.StreamId;
      }
      if (other.ExpectedVersion != 0) {
        ExpectedVersion = other.ExpectedVersion;
      }
      events_.Add(other.events_);
      if (other.userCredentials_ != null) {
        if (userCredentials_ == null) {
          userCredentials_ = new global::EventStore.RPC.UserCredentials();
        }
        UserCredentials.MergeFrom(other.UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StreamId = input.ReadString();
            break;
          }
          case 16: {
            ExpectedVersion = input.ReadInt32();
            break;
          }
          case 26: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 34: {
            if (userCredentials_ == null) {
              userCredentials_ = new global::EventStore.RPC.UserCredentials();
            }
            input.ReadMessage(userCredentials_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppendToStreamResponse : pb::IMessage<AppendToStreamResponse> {
    private static readonly pb::MessageParser<AppendToStreamResponse> _parser = new pb::MessageParser<AppendToStreamResponse>(() => new AppendToStreamResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppendToStreamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamResponse(AppendToStreamResponse other) : this() {
      nextExpectedVersion_ = other.nextExpectedVersion_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamResponse Clone() {
      return new AppendToStreamResponse(this);
    }

    /// <summary>Field number for the "next_expected_version" field.</summary>
    public const int NextExpectedVersionFieldNumber = 1;
    private long nextExpectedVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextExpectedVersion {
      get { return nextExpectedVersion_; }
      set {
        nextExpectedVersion_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::EventStore.RPC.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::EventStore.RPC.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppendToStreamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppendToStreamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextExpectedVersion != other.NextExpectedVersion) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextExpectedVersion != 0L) hash ^= NextExpectedVersion.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextExpectedVersion != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NextExpectedVersion);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextExpectedVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextExpectedVersion);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppendToStreamResponse other) {
      if (other == null) {
        return;
      }
      if (other.NextExpectedVersion != 0L) {
        NextExpectedVersion = other.NextExpectedVersion;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::EventStore.RPC.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::EventStore.RPC.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextExpectedVersion = input.ReadInt64();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::EventStore.RPC.Position();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (error_ == null) {
              error_ = new global::EventStore.RPC.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeToStreamFromRequest : pb::IMessage<SubscribeToStreamFromRequest> {
    private static readonly pb::MessageParser<SubscribeToStreamFromRequest> _parser = new pb::MessageParser<SubscribeToStreamFromRequest>(() => new SubscribeToStreamFromRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeToStreamFromRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromRequest(SubscribeToStreamFromRequest other) : this() {
      streamId_ = other.streamId_;
      lastCheckpoint_ = other.lastCheckpoint_;
      UserCredentials = other.userCredentials_ != null ? other.UserCredentials.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromRequest Clone() {
      return new SubscribeToStreamFromRequest(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private string streamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamId {
      get { return streamId_; }
      set {
        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_checkpoint" field.</summary>
    public const int LastCheckpointFieldNumber = 2;
    private int lastCheckpoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastCheckpoint {
      get { return lastCheckpoint_; }
      set {
        lastCheckpoint_ = value;
      }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 3;
    private global::EventStore.RPC.UserCredentials userCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.UserCredentials UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeToStreamFromRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeToStreamFromRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (LastCheckpoint != other.LastCheckpoint) return false;
      if (!object.Equals(UserCredentials, other.UserCredentials)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
      if (LastCheckpoint != 0) hash ^= LastCheckpoint.GetHashCode();
      if (userCredentials_ != null) hash ^= UserCredentials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamId);
      }
      if (LastCheckpoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastCheckpoint);
      }
      if (userCredentials_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
      }
      if (LastCheckpoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastCheckpoint);
      }
      if (userCredentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeToStreamFromRequest other) {
      if (other == null) {
        return;
      }
      if (other.StreamId.Length != 0) {
        StreamId = other.StreamId;
      }
      if (other.LastCheckpoint != 0) {
        LastCheckpoint = other.LastCheckpoint;
      }
      if (other.userCredentials_ != null) {
        if (userCredentials_ == null) {
          userCredentials_ = new global::EventStore.RPC.UserCredentials();
        }
        UserCredentials.MergeFrom(other.UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StreamId = input.ReadString();
            break;
          }
          case 16: {
            LastCheckpoint = input.ReadInt32();
            break;
          }
          case 26: {
            if (userCredentials_ == null) {
              userCredentials_ = new global::EventStore.RPC.UserCredentials();
            }
            input.ReadMessage(userCredentials_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeToStreamFromResponse : pb::IMessage<SubscribeToStreamFromResponse> {
    private static readonly pb::MessageParser<SubscribeToStreamFromResponse> _parser = new pb::MessageParser<SubscribeToStreamFromResponse>(() => new SubscribeToStreamFromResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeToStreamFromResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromResponse(SubscribeToStreamFromResponse other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
      dropReason_ = other.dropReason_;
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromResponse Clone() {
      return new SubscribeToStreamFromResponse(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.RPC.ResolvedEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.ResolvedEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "drop_reason" field.</summary>
    public const int DropReasonFieldNumber = 2;
    private global::EventStore.RPC.SubscribeToStreamFromResponse.Types.DropReason dropReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.SubscribeToStreamFromResponse.Types.DropReason DropReason {
      get { return dropReason_; }
      set {
        dropReason_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::EventStore.RPC.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeToStreamFromResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeToStreamFromResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      if (DropReason != other.DropReason) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (DropReason != 0) hash ^= DropReason.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (DropReason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DropReason);
      }
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (DropReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DropReason);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeToStreamFromResponse other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.RPC.ResolvedEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.DropReason != 0) {
        DropReason = other.DropReason;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::EventStore.RPC.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.RPC.ResolvedEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 16: {
            dropReason_ = (global::EventStore.RPC.SubscribeToStreamFromResponse.Types.DropReason) input.ReadEnum();
            break;
          }
          case 26: {
            if (error_ == null) {
              error_ = new global::EventStore.RPC.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SubscribeToStreamFromResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DropReason {
        [pbr::OriginalName("UserInitiated")] UserInitiated = 0,
        [pbr::OriginalName("NotAuthenticated")] NotAuthenticated = 1,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 2,
        [pbr::OriginalName("SubscribingError")] SubscribingError = 3,
        [pbr::OriginalName("ServerError")] ServerError = 4,
        [pbr::OriginalName("ConnectionClosed")] ConnectionClosed = 5,
        [pbr::OriginalName("CatchUpError")] CatchUpError = 6,
        [pbr::OriginalName("ProcessingQueueOverflow")] ProcessingQueueOverflow = 7,
        [pbr::OriginalName("EventHandlerException")] EventHandlerException = 8,
        [pbr::OriginalName("MaxSubscribersReached")] MaxSubscribersReached = 9,
        [pbr::OriginalName("PersistentSubscriptionDeleted")] PersistentSubscriptionDeleted = 10,
        [pbr::OriginalName("Unknown")] Unknown = 100,
        [pbr::OriginalName("NotFound")] NotFound = 101,
      }

    }
    #endregion

  }

  public sealed partial class CreatePersistentSubscriptionRequest : pb::IMessage<CreatePersistentSubscriptionRequest> {
    private static readonly pb::MessageParser<CreatePersistentSubscriptionRequest> _parser = new pb::MessageParser<CreatePersistentSubscriptionRequest>(() => new CreatePersistentSubscriptionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePersistentSubscriptionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionRequest(CreatePersistentSubscriptionRequest other) : this() {
      stream_ = other.stream_;
      groupName_ = other.groupName_;
      Settings = other.settings_ != null ? other.Settings.Clone() : null;
      UserCredentials = other.userCredentials_ != null ? other.UserCredentials.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionRequest Clone() {
      return new CreatePersistentSubscriptionRequest(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private string stream_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stream {
      get { return stream_; }
      set {
        stream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupName" field.</summary>
    public const int GroupNameFieldNumber = 2;
    private string groupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 3;
    private global::EventStore.RPC.PersistentSubscriptionSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.PersistentSubscriptionSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 4;
    private global::EventStore.RPC.UserCredentials userCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.UserCredentials UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePersistentSubscriptionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePersistentSubscriptionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stream != other.Stream) return false;
      if (GroupName != other.GroupName) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      if (!object.Equals(UserCredentials, other.UserCredentials)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stream.Length != 0) hash ^= Stream.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      if (userCredentials_ != null) hash ^= UserCredentials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stream.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Stream);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupName);
      }
      if (settings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Settings);
      }
      if (userCredentials_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stream.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stream);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (userCredentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePersistentSubscriptionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Stream.Length != 0) {
        Stream = other.Stream;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.settings_ != null) {
        if (settings_ == null) {
          settings_ = new global::EventStore.RPC.PersistentSubscriptionSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      if (other.userCredentials_ != null) {
        if (userCredentials_ == null) {
          userCredentials_ = new global::EventStore.RPC.UserCredentials();
        }
        UserCredentials.MergeFrom(other.UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Stream = input.ReadString();
            break;
          }
          case 18: {
            GroupName = input.ReadString();
            break;
          }
          case 26: {
            if (settings_ == null) {
              settings_ = new global::EventStore.RPC.PersistentSubscriptionSettings();
            }
            input.ReadMessage(settings_);
            break;
          }
          case 34: {
            if (userCredentials_ == null) {
              userCredentials_ = new global::EventStore.RPC.UserCredentials();
            }
            input.ReadMessage(userCredentials_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatePersistentSubscriptionResponse : pb::IMessage<CreatePersistentSubscriptionResponse> {
    private static readonly pb::MessageParser<CreatePersistentSubscriptionResponse> _parser = new pb::MessageParser<CreatePersistentSubscriptionResponse>(() => new CreatePersistentSubscriptionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePersistentSubscriptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionResponse(CreatePersistentSubscriptionResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionResponse Clone() {
      return new CreatePersistentSubscriptionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePersistentSubscriptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePersistentSubscriptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePersistentSubscriptionResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class UpdatePersistentSubscriptionRequest : pb::IMessage<UpdatePersistentSubscriptionRequest> {
    private static readonly pb::MessageParser<UpdatePersistentSubscriptionRequest> _parser = new pb::MessageParser<UpdatePersistentSubscriptionRequest>(() => new UpdatePersistentSubscriptionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePersistentSubscriptionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionRequest(UpdatePersistentSubscriptionRequest other) : this() {
      stream_ = other.stream_;
      groupName_ = other.groupName_;
      Settings = other.settings_ != null ? other.Settings.Clone() : null;
      UserCredentials = other.userCredentials_ != null ? other.UserCredentials.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionRequest Clone() {
      return new UpdatePersistentSubscriptionRequest(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private string stream_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stream {
      get { return stream_; }
      set {
        stream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupName" field.</summary>
    public const int GroupNameFieldNumber = 2;
    private string groupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 3;
    private global::EventStore.RPC.PersistentSubscriptionSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.PersistentSubscriptionSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 4;
    private global::EventStore.RPC.UserCredentials userCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.UserCredentials UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePersistentSubscriptionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePersistentSubscriptionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stream != other.Stream) return false;
      if (GroupName != other.GroupName) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      if (!object.Equals(UserCredentials, other.UserCredentials)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stream.Length != 0) hash ^= Stream.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      if (userCredentials_ != null) hash ^= UserCredentials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stream.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Stream);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupName);
      }
      if (settings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Settings);
      }
      if (userCredentials_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stream.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stream);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (userCredentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePersistentSubscriptionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Stream.Length != 0) {
        Stream = other.Stream;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.settings_ != null) {
        if (settings_ == null) {
          settings_ = new global::EventStore.RPC.PersistentSubscriptionSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      if (other.userCredentials_ != null) {
        if (userCredentials_ == null) {
          userCredentials_ = new global::EventStore.RPC.UserCredentials();
        }
        UserCredentials.MergeFrom(other.UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Stream = input.ReadString();
            break;
          }
          case 18: {
            GroupName = input.ReadString();
            break;
          }
          case 26: {
            if (settings_ == null) {
              settings_ = new global::EventStore.RPC.PersistentSubscriptionSettings();
            }
            input.ReadMessage(settings_);
            break;
          }
          case 34: {
            if (userCredentials_ == null) {
              userCredentials_ = new global::EventStore.RPC.UserCredentials();
            }
            input.ReadMessage(userCredentials_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePersistentSubscriptionResponse : pb::IMessage<UpdatePersistentSubscriptionResponse> {
    private static readonly pb::MessageParser<UpdatePersistentSubscriptionResponse> _parser = new pb::MessageParser<UpdatePersistentSubscriptionResponse>(() => new UpdatePersistentSubscriptionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePersistentSubscriptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionResponse(UpdatePersistentSubscriptionResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionResponse Clone() {
      return new UpdatePersistentSubscriptionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePersistentSubscriptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePersistentSubscriptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePersistentSubscriptionResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DeletePersistentSubscriptionRequest : pb::IMessage<DeletePersistentSubscriptionRequest> {
    private static readonly pb::MessageParser<DeletePersistentSubscriptionRequest> _parser = new pb::MessageParser<DeletePersistentSubscriptionRequest>(() => new DeletePersistentSubscriptionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePersistentSubscriptionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionRequest(DeletePersistentSubscriptionRequest other) : this() {
      stream_ = other.stream_;
      groupName_ = other.groupName_;
      UserCredentials = other.userCredentials_ != null ? other.UserCredentials.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionRequest Clone() {
      return new DeletePersistentSubscriptionRequest(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private string stream_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stream {
      get { return stream_; }
      set {
        stream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupName" field.</summary>
    public const int GroupNameFieldNumber = 2;
    private string groupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 3;
    private global::EventStore.RPC.UserCredentials userCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.UserCredentials UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePersistentSubscriptionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePersistentSubscriptionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stream != other.Stream) return false;
      if (GroupName != other.GroupName) return false;
      if (!object.Equals(UserCredentials, other.UserCredentials)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stream.Length != 0) hash ^= Stream.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (userCredentials_ != null) hash ^= UserCredentials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stream.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Stream);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupName);
      }
      if (userCredentials_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stream.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stream);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (userCredentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePersistentSubscriptionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Stream.Length != 0) {
        Stream = other.Stream;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.userCredentials_ != null) {
        if (userCredentials_ == null) {
          userCredentials_ = new global::EventStore.RPC.UserCredentials();
        }
        UserCredentials.MergeFrom(other.UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Stream = input.ReadString();
            break;
          }
          case 18: {
            GroupName = input.ReadString();
            break;
          }
          case 26: {
            if (userCredentials_ == null) {
              userCredentials_ = new global::EventStore.RPC.UserCredentials();
            }
            input.ReadMessage(userCredentials_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeletePersistentSubscriptionResponse : pb::IMessage<DeletePersistentSubscriptionResponse> {
    private static readonly pb::MessageParser<DeletePersistentSubscriptionResponse> _parser = new pb::MessageParser<DeletePersistentSubscriptionResponse>(() => new DeletePersistentSubscriptionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePersistentSubscriptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionResponse(DeletePersistentSubscriptionResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionResponse Clone() {
      return new DeletePersistentSubscriptionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePersistentSubscriptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePersistentSubscriptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePersistentSubscriptionResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ConnectToPersistentSubscriptionRequest : pb::IMessage<ConnectToPersistentSubscriptionRequest> {
    private static readonly pb::MessageParser<ConnectToPersistentSubscriptionRequest> _parser = new pb::MessageParser<ConnectToPersistentSubscriptionRequest>(() => new ConnectToPersistentSubscriptionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToPersistentSubscriptionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscriptionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscriptionRequest(ConnectToPersistentSubscriptionRequest other) : this() {
      stream_ = other.stream_;
      groupName_ = other.groupName_;
      UserCredentials = other.userCredentials_ != null ? other.UserCredentials.Clone() : null;
      bufferSize_ = other.bufferSize_;
      autoAck_ = other.autoAck_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscriptionRequest Clone() {
      return new ConnectToPersistentSubscriptionRequest(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private string stream_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stream {
      get { return stream_; }
      set {
        stream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupName" field.</summary>
    public const int GroupNameFieldNumber = 2;
    private string groupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 3;
    private global::EventStore.RPC.UserCredentials userCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.UserCredentials UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = value;
      }
    }

    /// <summary>Field number for the "bufferSize" field.</summary>
    public const int BufferSizeFieldNumber = 4;
    private int bufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BufferSize {
      get { return bufferSize_; }
      set {
        bufferSize_ = value;
      }
    }

    /// <summary>Field number for the "autoAck" field.</summary>
    public const int AutoAckFieldNumber = 5;
    private bool autoAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoAck {
      get { return autoAck_; }
      set {
        autoAck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToPersistentSubscriptionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToPersistentSubscriptionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stream != other.Stream) return false;
      if (GroupName != other.GroupName) return false;
      if (!object.Equals(UserCredentials, other.UserCredentials)) return false;
      if (BufferSize != other.BufferSize) return false;
      if (AutoAck != other.AutoAck) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stream.Length != 0) hash ^= Stream.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (userCredentials_ != null) hash ^= UserCredentials.GetHashCode();
      if (BufferSize != 0) hash ^= BufferSize.GetHashCode();
      if (AutoAck != false) hash ^= AutoAck.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stream.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Stream);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupName);
      }
      if (userCredentials_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserCredentials);
      }
      if (BufferSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BufferSize);
      }
      if (AutoAck != false) {
        output.WriteRawTag(40);
        output.WriteBool(AutoAck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stream.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stream);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (userCredentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCredentials);
      }
      if (BufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BufferSize);
      }
      if (AutoAck != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToPersistentSubscriptionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Stream.Length != 0) {
        Stream = other.Stream;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.userCredentials_ != null) {
        if (userCredentials_ == null) {
          userCredentials_ = new global::EventStore.RPC.UserCredentials();
        }
        UserCredentials.MergeFrom(other.UserCredentials);
      }
      if (other.BufferSize != 0) {
        BufferSize = other.BufferSize;
      }
      if (other.AutoAck != false) {
        AutoAck = other.AutoAck;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Stream = input.ReadString();
            break;
          }
          case 18: {
            GroupName = input.ReadString();
            break;
          }
          case 26: {
            if (userCredentials_ == null) {
              userCredentials_ = new global::EventStore.RPC.UserCredentials();
            }
            input.ReadMessage(userCredentials_);
            break;
          }
          case 32: {
            BufferSize = input.ReadInt32();
            break;
          }
          case 40: {
            AutoAck = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectToPersistentSubscriptionResponse : pb::IMessage<ConnectToPersistentSubscriptionResponse> {
    private static readonly pb::MessageParser<ConnectToPersistentSubscriptionResponse> _parser = new pb::MessageParser<ConnectToPersistentSubscriptionResponse>(() => new ConnectToPersistentSubscriptionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToPersistentSubscriptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscriptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscriptionResponse(ConnectToPersistentSubscriptionResponse other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
      dropReason_ = other.dropReason_;
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscriptionResponse Clone() {
      return new ConnectToPersistentSubscriptionResponse(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.RPC.ResolvedEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.ResolvedEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "drop_reason" field.</summary>
    public const int DropReasonFieldNumber = 2;
    private global::EventStore.RPC.ConnectToPersistentSubscriptionResponse.Types.DropReason dropReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.ConnectToPersistentSubscriptionResponse.Types.DropReason DropReason {
      get { return dropReason_; }
      set {
        dropReason_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::EventStore.RPC.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToPersistentSubscriptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToPersistentSubscriptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      if (DropReason != other.DropReason) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (DropReason != 0) hash ^= DropReason.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (DropReason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DropReason);
      }
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (DropReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DropReason);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToPersistentSubscriptionResponse other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.RPC.ResolvedEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.DropReason != 0) {
        DropReason = other.DropReason;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::EventStore.RPC.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.RPC.ResolvedEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 16: {
            dropReason_ = (global::EventStore.RPC.ConnectToPersistentSubscriptionResponse.Types.DropReason) input.ReadEnum();
            break;
          }
          case 26: {
            if (error_ == null) {
              error_ = new global::EventStore.RPC.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConnectToPersistentSubscriptionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DropReason {
        [pbr::OriginalName("UserInitiated")] UserInitiated = 0,
        [pbr::OriginalName("NotAuthenticated")] NotAuthenticated = 1,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 2,
        [pbr::OriginalName("SubscribingError")] SubscribingError = 3,
        [pbr::OriginalName("ServerError")] ServerError = 4,
        [pbr::OriginalName("ConnectionClosed")] ConnectionClosed = 5,
        [pbr::OriginalName("CatchUpError")] CatchUpError = 6,
        [pbr::OriginalName("ProcessingQueueOverflow")] ProcessingQueueOverflow = 7,
        [pbr::OriginalName("EventHandlerException")] EventHandlerException = 8,
        [pbr::OriginalName("MaxSubscribersReached")] MaxSubscribersReached = 9,
        [pbr::OriginalName("PersistentSubscriptionDeleted")] PersistentSubscriptionDeleted = 10,
        [pbr::OriginalName("Unknown")] Unknown = 100,
        [pbr::OriginalName("NotFound")] NotFound = 101,
      }

    }
    #endregion

  }

  public sealed partial class EventData : pb::IMessage<EventData> {
    private static readonly pb::MessageParser<EventData> _parser = new pb::MessageParser<EventData>(() => new EventData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData(EventData other) : this() {
      eventId_ = other.eventId_;
      eventType_ = other.eventType_;
      isJson_ = other.isJson_;
      data_ = other.data_;
      metadata_ = other.metadata_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData Clone() {
      return new EventData(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private pb::ByteString eventId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private string eventType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_json" field.</summary>
    public const int IsJsonFieldNumber = 3;
    private bool isJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJson {
      get { return isJson_; }
      set {
        isJson_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (EventType != other.EventType) return false;
      if (IsJson != other.IsJson) return false;
      if (Data != other.Data) return false;
      if (Metadata != other.Metadata) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (IsJson != false) hash ^= IsJson.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EventId);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EventType);
      }
      if (IsJson != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsJson);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventId);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (IsJson != false) {
        size += 1 + 1;
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventData other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.IsJson != false) {
        IsJson = other.IsJson;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventId = input.ReadBytes();
            break;
          }
          case 18: {
            EventType = input.ReadString();
            break;
          }
          case 24: {
            IsJson = input.ReadBool();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 42: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserCredentials : pb::IMessage<UserCredentials> {
    private static readonly pb::MessageParser<UserCredentials> _parser = new pb::MessageParser<UserCredentials>(() => new UserCredentials());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCredentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCredentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCredentials(UserCredentials other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCredentials Clone() {
      return new UserCredentials(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCredentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCredentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCredentials other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      commitPosition_ = other.commitPosition_;
      preparePosition_ = other.preparePosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "commit_position" field.</summary>
    public const int CommitPositionFieldNumber = 1;
    private long commitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitPosition {
      get { return commitPosition_; }
      set {
        commitPosition_ = value;
      }
    }

    /// <summary>Field number for the "prepare_position" field.</summary>
    public const int PreparePositionFieldNumber = 2;
    private long preparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreparePosition {
      get { return preparePosition_; }
      set {
        preparePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommitPosition != other.CommitPosition) return false;
      if (PreparePosition != other.PreparePosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommitPosition != 0L) hash ^= CommitPosition.GetHashCode();
      if (PreparePosition != 0L) hash ^= PreparePosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommitPosition != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommitPosition);
      }
      if (PreparePosition != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PreparePosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitPosition);
      }
      if (PreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreparePosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.CommitPosition != 0L) {
        CommitPosition = other.CommitPosition;
      }
      if (other.PreparePosition != 0L) {
        PreparePosition = other.PreparePosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommitPosition = input.ReadInt64();
            break;
          }
          case 16: {
            PreparePosition = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      type_ = other.type_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordedEvent : pb::IMessage<RecordedEvent> {
    private static readonly pb::MessageParser<RecordedEvent> _parser = new pb::MessageParser<RecordedEvent>(() => new RecordedEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordedEvent(RecordedEvent other) : this() {
      eventStreamId_ = other.eventStreamId_;
      eventId_ = other.eventId_;
      eventNumber_ = other.eventNumber_;
      eventType_ = other.eventType_;
      data_ = other.data_;
      metadata_ = other.metadata_;
      isJson_ = other.isJson_;
      created_ = other.created_;
      createdEpoch_ = other.createdEpoch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordedEvent Clone() {
      return new RecordedEvent(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private pb::ByteString eventId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_number" field.</summary>
    public const int EventNumberFieldNumber = 3;
    private long eventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventNumber {
      get { return eventNumber_; }
      set {
        eventNumber_ = value;
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 4;
    private string eventType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_json" field.</summary>
    public const int IsJsonFieldNumber = 7;
    private bool isJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJson {
      get { return isJson_; }
      set {
        isJson_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 8;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "created_epoch" field.</summary>
    public const int CreatedEpochFieldNumber = 9;
    private long createdEpoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedEpoch {
      get { return createdEpoch_; }
      set {
        createdEpoch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (EventId != other.EventId) return false;
      if (EventNumber != other.EventNumber) return false;
      if (EventType != other.EventType) return false;
      if (Data != other.Data) return false;
      if (Metadata != other.Metadata) return false;
      if (IsJson != other.IsJson) return false;
      if (Created != other.Created) return false;
      if (CreatedEpoch != other.CreatedEpoch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (EventNumber != 0L) hash ^= EventNumber.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (IsJson != false) hash ^= IsJson.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (CreatedEpoch != 0L) hash ^= CreatedEpoch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EventId);
      }
      if (EventNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EventNumber);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EventType);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
      if (IsJson != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsJson);
      }
      if (Created != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Created);
      }
      if (CreatedEpoch != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CreatedEpoch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventId);
      }
      if (EventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventNumber);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (IsJson != false) {
        size += 1 + 1;
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (CreatedEpoch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedEpoch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordedEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.EventNumber != 0L) {
        EventNumber = other.EventNumber;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.IsJson != false) {
        IsJson = other.IsJson;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.CreatedEpoch != 0L) {
        CreatedEpoch = other.CreatedEpoch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 18: {
            EventId = input.ReadBytes();
            break;
          }
          case 24: {
            EventNumber = input.ReadInt64();
            break;
          }
          case 34: {
            EventType = input.ReadString();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
          case 56: {
            IsJson = input.ReadBool();
            break;
          }
          case 64: {
            Created = input.ReadInt64();
            break;
          }
          case 72: {
            CreatedEpoch = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResolvedEvent : pb::IMessage<ResolvedEvent> {
    private static readonly pb::MessageParser<ResolvedEvent> _parser = new pb::MessageParser<ResolvedEvent>(() => new ResolvedEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolvedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent(ResolvedEvent other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent Clone() {
      return new ResolvedEvent(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.RPC.RecordedEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.RecordedEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::EventStore.RPC.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolvedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolvedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolvedEvent other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.RPC.RecordedEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::EventStore.RPC.Position();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.RPC.RecordedEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::EventStore.RPC.Position();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PersistentSubscriptionSettings : pb::IMessage<PersistentSubscriptionSettings> {
    private static readonly pb::MessageParser<PersistentSubscriptionSettings> _parser = new pb::MessageParser<PersistentSubscriptionSettings>(() => new PersistentSubscriptionSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersistentSubscriptionSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionSettings(PersistentSubscriptionSettings other) : this() {
      resolveLinkTos_ = other.resolveLinkTos_;
      startFrom_ = other.startFrom_;
      extraStatistics_ = other.extraStatistics_;
      messageTimeout_ = other.messageTimeout_;
      maxRetryCount_ = other.maxRetryCount_;
      liveBufferSize_ = other.liveBufferSize_;
      readBatchSize_ = other.readBatchSize_;
      historyBufferSize_ = other.historyBufferSize_;
      checkPointAfter_ = other.checkPointAfter_;
      minCheckPointCount_ = other.minCheckPointCount_;
      maxCheckPointCount_ = other.maxCheckPointCount_;
      maxSubscriberCount_ = other.maxSubscriberCount_;
      namedConsumerStrategy_ = other.namedConsumerStrategy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionSettings Clone() {
      return new PersistentSubscriptionSettings(this);
    }

    /// <summary>Field number for the "resolve_link_tos" field.</summary>
    public const int ResolveLinkTosFieldNumber = 1;
    private bool resolveLinkTos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResolveLinkTos {
      get { return resolveLinkTos_; }
      set {
        resolveLinkTos_ = value;
      }
    }

    /// <summary>Field number for the "start_from" field.</summary>
    public const int StartFromFieldNumber = 2;
    private long startFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartFrom {
      get { return startFrom_; }
      set {
        startFrom_ = value;
      }
    }

    /// <summary>Field number for the "extra_statistics" field.</summary>
    public const int ExtraStatisticsFieldNumber = 3;
    private bool extraStatistics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExtraStatistics {
      get { return extraStatistics_; }
      set {
        extraStatistics_ = value;
      }
    }

    /// <summary>Field number for the "message_timeout" field.</summary>
    public const int MessageTimeoutFieldNumber = 4;
    private double messageTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MessageTimeout {
      get { return messageTimeout_; }
      set {
        messageTimeout_ = value;
      }
    }

    /// <summary>Field number for the "max_retry_count" field.</summary>
    public const int MaxRetryCountFieldNumber = 5;
    private int maxRetryCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRetryCount {
      get { return maxRetryCount_; }
      set {
        maxRetryCount_ = value;
      }
    }

    /// <summary>Field number for the "live_buffer_size" field.</summary>
    public const int LiveBufferSizeFieldNumber = 6;
    private int liveBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LiveBufferSize {
      get { return liveBufferSize_; }
      set {
        liveBufferSize_ = value;
      }
    }

    /// <summary>Field number for the "read_batch_size" field.</summary>
    public const int ReadBatchSizeFieldNumber = 7;
    private int readBatchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadBatchSize {
      get { return readBatchSize_; }
      set {
        readBatchSize_ = value;
      }
    }

    /// <summary>Field number for the "history_buffer_size" field.</summary>
    public const int HistoryBufferSizeFieldNumber = 8;
    private int historyBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistoryBufferSize {
      get { return historyBufferSize_; }
      set {
        historyBufferSize_ = value;
      }
    }

    /// <summary>Field number for the "check_point_after" field.</summary>
    public const int CheckPointAfterFieldNumber = 9;
    private double checkPointAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CheckPointAfter {
      get { return checkPointAfter_; }
      set {
        checkPointAfter_ = value;
      }
    }

    /// <summary>Field number for the "min_check_point_count" field.</summary>
    public const int MinCheckPointCountFieldNumber = 10;
    private int minCheckPointCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinCheckPointCount {
      get { return minCheckPointCount_; }
      set {
        minCheckPointCount_ = value;
      }
    }

    /// <summary>Field number for the "max_check_point_count" field.</summary>
    public const int MaxCheckPointCountFieldNumber = 11;
    private int maxCheckPointCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCheckPointCount {
      get { return maxCheckPointCount_; }
      set {
        maxCheckPointCount_ = value;
      }
    }

    /// <summary>Field number for the "max_subscriber_count" field.</summary>
    public const int MaxSubscriberCountFieldNumber = 12;
    private int maxSubscriberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSubscriberCount {
      get { return maxSubscriberCount_; }
      set {
        maxSubscriberCount_ = value;
      }
    }

    /// <summary>Field number for the "named_consumer_strategy" field.</summary>
    public const int NamedConsumerStrategyFieldNumber = 13;
    private string namedConsumerStrategy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamedConsumerStrategy {
      get { return namedConsumerStrategy_; }
      set {
        namedConsumerStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersistentSubscriptionSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersistentSubscriptionSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResolveLinkTos != other.ResolveLinkTos) return false;
      if (StartFrom != other.StartFrom) return false;
      if (ExtraStatistics != other.ExtraStatistics) return false;
      if (MessageTimeout != other.MessageTimeout) return false;
      if (MaxRetryCount != other.MaxRetryCount) return false;
      if (LiveBufferSize != other.LiveBufferSize) return false;
      if (ReadBatchSize != other.ReadBatchSize) return false;
      if (HistoryBufferSize != other.HistoryBufferSize) return false;
      if (CheckPointAfter != other.CheckPointAfter) return false;
      if (MinCheckPointCount != other.MinCheckPointCount) return false;
      if (MaxCheckPointCount != other.MaxCheckPointCount) return false;
      if (MaxSubscriberCount != other.MaxSubscriberCount) return false;
      if (NamedConsumerStrategy != other.NamedConsumerStrategy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResolveLinkTos != false) hash ^= ResolveLinkTos.GetHashCode();
      if (StartFrom != 0L) hash ^= StartFrom.GetHashCode();
      if (ExtraStatistics != false) hash ^= ExtraStatistics.GetHashCode();
      if (MessageTimeout != 0D) hash ^= MessageTimeout.GetHashCode();
      if (MaxRetryCount != 0) hash ^= MaxRetryCount.GetHashCode();
      if (LiveBufferSize != 0) hash ^= LiveBufferSize.GetHashCode();
      if (ReadBatchSize != 0) hash ^= ReadBatchSize.GetHashCode();
      if (HistoryBufferSize != 0) hash ^= HistoryBufferSize.GetHashCode();
      if (CheckPointAfter != 0D) hash ^= CheckPointAfter.GetHashCode();
      if (MinCheckPointCount != 0) hash ^= MinCheckPointCount.GetHashCode();
      if (MaxCheckPointCount != 0) hash ^= MaxCheckPointCount.GetHashCode();
      if (MaxSubscriberCount != 0) hash ^= MaxSubscriberCount.GetHashCode();
      if (NamedConsumerStrategy.Length != 0) hash ^= NamedConsumerStrategy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResolveLinkTos != false) {
        output.WriteRawTag(8);
        output.WriteBool(ResolveLinkTos);
      }
      if (StartFrom != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartFrom);
      }
      if (ExtraStatistics != false) {
        output.WriteRawTag(24);
        output.WriteBool(ExtraStatistics);
      }
      if (MessageTimeout != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MessageTimeout);
      }
      if (MaxRetryCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxRetryCount);
      }
      if (LiveBufferSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LiveBufferSize);
      }
      if (ReadBatchSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ReadBatchSize);
      }
      if (HistoryBufferSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HistoryBufferSize);
      }
      if (CheckPointAfter != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CheckPointAfter);
      }
      if (MinCheckPointCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MinCheckPointCount);
      }
      if (MaxCheckPointCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MaxCheckPointCount);
      }
      if (MaxSubscriberCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxSubscriberCount);
      }
      if (NamedConsumerStrategy.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(NamedConsumerStrategy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResolveLinkTos != false) {
        size += 1 + 1;
      }
      if (StartFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartFrom);
      }
      if (ExtraStatistics != false) {
        size += 1 + 1;
      }
      if (MessageTimeout != 0D) {
        size += 1 + 8;
      }
      if (MaxRetryCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRetryCount);
      }
      if (LiveBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LiveBufferSize);
      }
      if (ReadBatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadBatchSize);
      }
      if (HistoryBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistoryBufferSize);
      }
      if (CheckPointAfter != 0D) {
        size += 1 + 8;
      }
      if (MinCheckPointCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinCheckPointCount);
      }
      if (MaxCheckPointCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCheckPointCount);
      }
      if (MaxSubscriberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSubscriberCount);
      }
      if (NamedConsumerStrategy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamedConsumerStrategy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersistentSubscriptionSettings other) {
      if (other == null) {
        return;
      }
      if (other.ResolveLinkTos != false) {
        ResolveLinkTos = other.ResolveLinkTos;
      }
      if (other.StartFrom != 0L) {
        StartFrom = other.StartFrom;
      }
      if (other.ExtraStatistics != false) {
        ExtraStatistics = other.ExtraStatistics;
      }
      if (other.MessageTimeout != 0D) {
        MessageTimeout = other.MessageTimeout;
      }
      if (other.MaxRetryCount != 0) {
        MaxRetryCount = other.MaxRetryCount;
      }
      if (other.LiveBufferSize != 0) {
        LiveBufferSize = other.LiveBufferSize;
      }
      if (other.ReadBatchSize != 0) {
        ReadBatchSize = other.ReadBatchSize;
      }
      if (other.HistoryBufferSize != 0) {
        HistoryBufferSize = other.HistoryBufferSize;
      }
      if (other.CheckPointAfter != 0D) {
        CheckPointAfter = other.CheckPointAfter;
      }
      if (other.MinCheckPointCount != 0) {
        MinCheckPointCount = other.MinCheckPointCount;
      }
      if (other.MaxCheckPointCount != 0) {
        MaxCheckPointCount = other.MaxCheckPointCount;
      }
      if (other.MaxSubscriberCount != 0) {
        MaxSubscriberCount = other.MaxSubscriberCount;
      }
      if (other.NamedConsumerStrategy.Length != 0) {
        NamedConsumerStrategy = other.NamedConsumerStrategy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResolveLinkTos = input.ReadBool();
            break;
          }
          case 16: {
            StartFrom = input.ReadInt64();
            break;
          }
          case 24: {
            ExtraStatistics = input.ReadBool();
            break;
          }
          case 33: {
            MessageTimeout = input.ReadDouble();
            break;
          }
          case 40: {
            MaxRetryCount = input.ReadInt32();
            break;
          }
          case 48: {
            LiveBufferSize = input.ReadInt32();
            break;
          }
          case 56: {
            ReadBatchSize = input.ReadInt32();
            break;
          }
          case 64: {
            HistoryBufferSize = input.ReadInt32();
            break;
          }
          case 73: {
            CheckPointAfter = input.ReadDouble();
            break;
          }
          case 80: {
            MinCheckPointCount = input.ReadInt32();
            break;
          }
          case 88: {
            MaxCheckPointCount = input.ReadInt32();
            break;
          }
          case 96: {
            MaxSubscriberCount = input.ReadInt32();
            break;
          }
          case 106: {
            NamedConsumerStrategy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
