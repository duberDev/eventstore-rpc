// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_store.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EventStore.RPC {

  /// <summary>Holder for reflection information generated from event_store.proto</summary>
  public static partial class EventStoreReflection {

    #region Descriptor
    /// <summary>File descriptor for event_store.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventStoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFldmVudF9zdG9yZS5wcm90bxIKZXZlbnRzdG9yZSKiAQoVQXBwZW5kVG9T",
            "dHJlYW1SZXF1ZXN0EhEKCXN0cmVhbV9pZBgBIAEoCRIYChBleHBlY3RlZF92",
            "ZXJzaW9uGAIgASgFEiUKBmV2ZW50cxgDIAMoCzIVLmV2ZW50c3RvcmUuRXZl",
            "bnREYXRhEjUKEHVzZXJfY3JlZGVudGlhbHMYBCABKAsyGy5ldmVudHN0b3Jl",
            "LlVzZXJDcmVkZW50aWFscyKBAQoWQXBwZW5kVG9TdHJlYW1SZXNwb25zZRId",
            "ChVuZXh0X2V4cGVjdGVkX3ZlcnNpb24YASABKAUSJgoIcG9zaXRpb24YAiAB",
            "KAsyFC5ldmVudHN0b3JlLlBvc2l0aW9uEiAKBWVycm9yGAMgASgLMhEuZXZl",
            "bnRzdG9yZS5FcnJvciKBAQocU3Vic2NyaWJlVG9TdHJlYW1Gcm9tUmVxdWVz",
            "dBIRCglzdHJlYW1faWQYASABKAkSFwoPbGFzdF9jaGVja3BvaW50GAIgASgF",
            "EjUKEHVzZXJfY3JlZGVudGlhbHMYAyABKAsyGy5ldmVudHN0b3JlLlVzZXJD",
            "cmVkZW50aWFscyLgAwodU3Vic2NyaWJlVG9TdHJlYW1Gcm9tUmVzcG9uc2US",
            "KAoFZXZlbnQYASABKAsyGS5ldmVudHN0b3JlLlJlc29sdmVkRXZlbnQSSQoL",
            "ZHJvcF9yZWFzb24YAiABKA4yNC5ldmVudHN0b3JlLlN1YnNjcmliZVRvU3Ry",
            "ZWFtRnJvbVJlc3BvbnNlLkRyb3BSZWFzb24SIAoFZXJyb3IYAyABKAsyES5l",
            "dmVudHN0b3JlLkVycm9yIqcCCgpEcm9wUmVhc29uEhEKDVVzZXJJbml0aWF0",
            "ZWQQABIUChBOb3RBdXRoZW50aWNhdGVkEAESEAoMQWNjZXNzRGVuaWVkEAIS",
            "FAoQU3Vic2NyaWJpbmdFcnJvchADEg8KC1NlcnZlckVycm9yEAQSFAoQQ29u",
            "bmVjdGlvbkNsb3NlZBAFEhAKDENhdGNoVXBFcnJvchAGEhsKF1Byb2Nlc3Np",
            "bmdRdWV1ZU92ZXJmbG93EAcSGQoVRXZlbnRIYW5kbGVyRXhjZXB0aW9uEAgS",
            "GQoVTWF4U3Vic2NyaWJlcnNSZWFjaGVkEAkSIQodUGVyc2lzdGVudFN1YnNj",
            "cmlwdGlvbkRlbGV0ZWQQChILCgdVbmtub3duEGQSDAoITm90Rm91bmQQZSJi",
            "CglFdmVudERhdGESEAoIZXZlbnRfaWQYASABKAwSEgoKZXZlbnRfdHlwZRgC",
            "IAEoCRIPCgdpc19qc29uGAMgASgIEgwKBGRhdGEYBCABKAwSEAoIbWV0YWRh",
            "dGEYBSABKAwiNQoPVXNlckNyZWRlbnRpYWxzEhAKCHVzZXJuYW1lGAEgASgJ",
            "EhAKCHBhc3N3b3JkGAIgASgJIj0KCFBvc2l0aW9uEhcKD2NvbW1pdF9wb3Np",
            "dGlvbhgBIAEoAxIYChBwcmVwYXJlX3Bvc2l0aW9uGAIgASgDIiMKBUVycm9y",
            "EgwKBHR5cGUYASABKAkSDAoEdGV4dBgCIAEoCSK9AQoNUmVjb3JkZWRFdmVu",
            "dBIXCg9ldmVudF9zdHJlYW1faWQYASABKAkSEAoIZXZlbnRfaWQYAiABKAwS",
            "FAoMZXZlbnRfbnVtYmVyGAMgASgFEhIKCmV2ZW50X3R5cGUYBCABKAkSDAoE",
            "ZGF0YRgFIAEoDBIQCghtZXRhZGF0YRgGIAEoDBIPCgdpc19qc29uGAcgASgI",
            "Eg8KB2NyZWF0ZWQYCCABKAMSFQoNY3JlYXRlZF9lcG9jaBgJIAEoAyJhCg1S",
            "ZXNvbHZlZEV2ZW50EigKBWV2ZW50GAEgASgLMhkuZXZlbnRzdG9yZS5SZWNv",
            "cmRlZEV2ZW50EiYKCHBvc2l0aW9uGAIgASgLMhQuZXZlbnRzdG9yZS5Qb3Np",
            "dGlvbjLbAQoKRXZlbnRTdG9yZRJZCg5BcHBlbmRUb1N0cmVhbRIhLmV2ZW50",
            "c3RvcmUuQXBwZW5kVG9TdHJlYW1SZXF1ZXN0GiIuZXZlbnRzdG9yZS5BcHBl",
            "bmRUb1N0cmVhbVJlc3BvbnNlIgAScgoVU3Vic2NyaWJlVG9TdHJlYW1Gcm9t",
            "EiguZXZlbnRzdG9yZS5TdWJzY3JpYmVUb1N0cmVhbUZyb21SZXF1ZXN0Giku",
            "ZXZlbnRzdG9yZS5TdWJzY3JpYmVUb1N0cmVhbUZyb21SZXNwb25zZSIAKAEw",
            "AUI5ChJjb20uZXZlbnRzdG9yZS5ycGNCC0dSUENFU1Byb3RvUAGiAgJFU6oC",
            "DkV2ZW50U3RvcmUuUlBDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.AppendToStreamRequest), global::EventStore.RPC.AppendToStreamRequest.Parser, new[]{ "StreamId", "ExpectedVersion", "Events", "UserCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.AppendToStreamResponse), global::EventStore.RPC.AppendToStreamResponse.Parser, new[]{ "NextExpectedVersion", "Position", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.SubscribeToStreamFromRequest), global::EventStore.RPC.SubscribeToStreamFromRequest.Parser, new[]{ "StreamId", "LastCheckpoint", "UserCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.SubscribeToStreamFromResponse), global::EventStore.RPC.SubscribeToStreamFromResponse.Parser, new[]{ "Event", "DropReason", "Error" }, null, new[]{ typeof(global::EventStore.RPC.SubscribeToStreamFromResponse.Types.DropReason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.EventData), global::EventStore.RPC.EventData.Parser, new[]{ "EventId", "EventType", "IsJson", "Data", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.UserCredentials), global::EventStore.RPC.UserCredentials.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.Position), global::EventStore.RPC.Position.Parser, new[]{ "CommitPosition", "PreparePosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.Error), global::EventStore.RPC.Error.Parser, new[]{ "Type", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.RecordedEvent), global::EventStore.RPC.RecordedEvent.Parser, new[]{ "EventStreamId", "EventId", "EventNumber", "EventType", "Data", "Metadata", "IsJson", "Created", "CreatedEpoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.RPC.ResolvedEvent), global::EventStore.RPC.ResolvedEvent.Parser, new[]{ "Event", "Position" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AppendToStreamRequest : pb::IMessage<AppendToStreamRequest> {
    private static readonly pb::MessageParser<AppendToStreamRequest> _parser = new pb::MessageParser<AppendToStreamRequest>(() => new AppendToStreamRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppendToStreamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamRequest(AppendToStreamRequest other) : this() {
      streamId_ = other.streamId_;
      expectedVersion_ = other.expectedVersion_;
      events_ = other.events_.Clone();
      UserCredentials = other.userCredentials_ != null ? other.UserCredentials.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamRequest Clone() {
      return new AppendToStreamRequest(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private string streamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamId {
      get { return streamId_; }
      set {
        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_version" field.</summary>
    public const int ExpectedVersionFieldNumber = 2;
    private int expectedVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpectedVersion {
      get { return expectedVersion_; }
      set {
        expectedVersion_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::EventStore.RPC.EventData> _repeated_events_codec
        = pb::FieldCodec.ForMessage(26, global::EventStore.RPC.EventData.Parser);
    private readonly pbc::RepeatedField<global::EventStore.RPC.EventData> events_ = new pbc::RepeatedField<global::EventStore.RPC.EventData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EventStore.RPC.EventData> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 4;
    private global::EventStore.RPC.UserCredentials userCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.UserCredentials UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppendToStreamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppendToStreamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (ExpectedVersion != other.ExpectedVersion) return false;
      if(!events_.Equals(other.events_)) return false;
      if (!object.Equals(UserCredentials, other.UserCredentials)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
      if (ExpectedVersion != 0) hash ^= ExpectedVersion.GetHashCode();
      hash ^= events_.GetHashCode();
      if (userCredentials_ != null) hash ^= UserCredentials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamId);
      }
      if (ExpectedVersion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExpectedVersion);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (userCredentials_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
      }
      if (ExpectedVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpectedVersion);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (userCredentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppendToStreamRequest other) {
      if (other == null) {
        return;
      }
      if (other.StreamId.Length != 0) {
        StreamId = other.StreamId;
      }
      if (other.ExpectedVersion != 0) {
        ExpectedVersion = other.ExpectedVersion;
      }
      events_.Add(other.events_);
      if (other.userCredentials_ != null) {
        if (userCredentials_ == null) {
          userCredentials_ = new global::EventStore.RPC.UserCredentials();
        }
        UserCredentials.MergeFrom(other.UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StreamId = input.ReadString();
            break;
          }
          case 16: {
            ExpectedVersion = input.ReadInt32();
            break;
          }
          case 26: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 34: {
            if (userCredentials_ == null) {
              userCredentials_ = new global::EventStore.RPC.UserCredentials();
            }
            input.ReadMessage(userCredentials_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppendToStreamResponse : pb::IMessage<AppendToStreamResponse> {
    private static readonly pb::MessageParser<AppendToStreamResponse> _parser = new pb::MessageParser<AppendToStreamResponse>(() => new AppendToStreamResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppendToStreamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamResponse(AppendToStreamResponse other) : this() {
      nextExpectedVersion_ = other.nextExpectedVersion_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendToStreamResponse Clone() {
      return new AppendToStreamResponse(this);
    }

    /// <summary>Field number for the "next_expected_version" field.</summary>
    public const int NextExpectedVersionFieldNumber = 1;
    private int nextExpectedVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextExpectedVersion {
      get { return nextExpectedVersion_; }
      set {
        nextExpectedVersion_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::EventStore.RPC.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::EventStore.RPC.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppendToStreamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppendToStreamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextExpectedVersion != other.NextExpectedVersion) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextExpectedVersion != 0) hash ^= NextExpectedVersion.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextExpectedVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NextExpectedVersion);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextExpectedVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextExpectedVersion);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppendToStreamResponse other) {
      if (other == null) {
        return;
      }
      if (other.NextExpectedVersion != 0) {
        NextExpectedVersion = other.NextExpectedVersion;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::EventStore.RPC.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::EventStore.RPC.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextExpectedVersion = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::EventStore.RPC.Position();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (error_ == null) {
              error_ = new global::EventStore.RPC.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeToStreamFromRequest : pb::IMessage<SubscribeToStreamFromRequest> {
    private static readonly pb::MessageParser<SubscribeToStreamFromRequest> _parser = new pb::MessageParser<SubscribeToStreamFromRequest>(() => new SubscribeToStreamFromRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeToStreamFromRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromRequest(SubscribeToStreamFromRequest other) : this() {
      streamId_ = other.streamId_;
      lastCheckpoint_ = other.lastCheckpoint_;
      UserCredentials = other.userCredentials_ != null ? other.UserCredentials.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromRequest Clone() {
      return new SubscribeToStreamFromRequest(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private string streamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamId {
      get { return streamId_; }
      set {
        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_checkpoint" field.</summary>
    public const int LastCheckpointFieldNumber = 2;
    private int lastCheckpoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastCheckpoint {
      get { return lastCheckpoint_; }
      set {
        lastCheckpoint_ = value;
      }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 3;
    private global::EventStore.RPC.UserCredentials userCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.UserCredentials UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeToStreamFromRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeToStreamFromRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (LastCheckpoint != other.LastCheckpoint) return false;
      if (!object.Equals(UserCredentials, other.UserCredentials)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
      if (LastCheckpoint != 0) hash ^= LastCheckpoint.GetHashCode();
      if (userCredentials_ != null) hash ^= UserCredentials.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamId);
      }
      if (LastCheckpoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastCheckpoint);
      }
      if (userCredentials_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
      }
      if (LastCheckpoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastCheckpoint);
      }
      if (userCredentials_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeToStreamFromRequest other) {
      if (other == null) {
        return;
      }
      if (other.StreamId.Length != 0) {
        StreamId = other.StreamId;
      }
      if (other.LastCheckpoint != 0) {
        LastCheckpoint = other.LastCheckpoint;
      }
      if (other.userCredentials_ != null) {
        if (userCredentials_ == null) {
          userCredentials_ = new global::EventStore.RPC.UserCredentials();
        }
        UserCredentials.MergeFrom(other.UserCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StreamId = input.ReadString();
            break;
          }
          case 16: {
            LastCheckpoint = input.ReadInt32();
            break;
          }
          case 26: {
            if (userCredentials_ == null) {
              userCredentials_ = new global::EventStore.RPC.UserCredentials();
            }
            input.ReadMessage(userCredentials_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeToStreamFromResponse : pb::IMessage<SubscribeToStreamFromResponse> {
    private static readonly pb::MessageParser<SubscribeToStreamFromResponse> _parser = new pb::MessageParser<SubscribeToStreamFromResponse>(() => new SubscribeToStreamFromResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeToStreamFromResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromResponse(SubscribeToStreamFromResponse other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
      dropReason_ = other.dropReason_;
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStreamFromResponse Clone() {
      return new SubscribeToStreamFromResponse(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.RPC.ResolvedEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.ResolvedEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "drop_reason" field.</summary>
    public const int DropReasonFieldNumber = 2;
    private global::EventStore.RPC.SubscribeToStreamFromResponse.Types.DropReason dropReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.SubscribeToStreamFromResponse.Types.DropReason DropReason {
      get { return dropReason_; }
      set {
        dropReason_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::EventStore.RPC.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeToStreamFromResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeToStreamFromResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      if (DropReason != other.DropReason) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (DropReason != 0) hash ^= DropReason.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (DropReason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DropReason);
      }
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (DropReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DropReason);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeToStreamFromResponse other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.RPC.ResolvedEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.DropReason != 0) {
        DropReason = other.DropReason;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::EventStore.RPC.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.RPC.ResolvedEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 16: {
            dropReason_ = (global::EventStore.RPC.SubscribeToStreamFromResponse.Types.DropReason) input.ReadEnum();
            break;
          }
          case 26: {
            if (error_ == null) {
              error_ = new global::EventStore.RPC.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SubscribeToStreamFromResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DropReason {
        [pbr::OriginalName("UserInitiated")] UserInitiated = 0,
        [pbr::OriginalName("NotAuthenticated")] NotAuthenticated = 1,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 2,
        [pbr::OriginalName("SubscribingError")] SubscribingError = 3,
        [pbr::OriginalName("ServerError")] ServerError = 4,
        [pbr::OriginalName("ConnectionClosed")] ConnectionClosed = 5,
        [pbr::OriginalName("CatchUpError")] CatchUpError = 6,
        [pbr::OriginalName("ProcessingQueueOverflow")] ProcessingQueueOverflow = 7,
        [pbr::OriginalName("EventHandlerException")] EventHandlerException = 8,
        [pbr::OriginalName("MaxSubscribersReached")] MaxSubscribersReached = 9,
        [pbr::OriginalName("PersistentSubscriptionDeleted")] PersistentSubscriptionDeleted = 10,
        [pbr::OriginalName("Unknown")] Unknown = 100,
        [pbr::OriginalName("NotFound")] NotFound = 101,
      }

    }
    #endregion

  }

  public sealed partial class EventData : pb::IMessage<EventData> {
    private static readonly pb::MessageParser<EventData> _parser = new pb::MessageParser<EventData>(() => new EventData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData(EventData other) : this() {
      eventId_ = other.eventId_;
      eventType_ = other.eventType_;
      isJson_ = other.isJson_;
      data_ = other.data_;
      metadata_ = other.metadata_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData Clone() {
      return new EventData(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private pb::ByteString eventId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private string eventType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_json" field.</summary>
    public const int IsJsonFieldNumber = 3;
    private bool isJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJson {
      get { return isJson_; }
      set {
        isJson_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (EventType != other.EventType) return false;
      if (IsJson != other.IsJson) return false;
      if (Data != other.Data) return false;
      if (Metadata != other.Metadata) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (IsJson != false) hash ^= IsJson.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EventId);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EventType);
      }
      if (IsJson != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsJson);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventId);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (IsJson != false) {
        size += 1 + 1;
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventData other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.IsJson != false) {
        IsJson = other.IsJson;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventId = input.ReadBytes();
            break;
          }
          case 18: {
            EventType = input.ReadString();
            break;
          }
          case 24: {
            IsJson = input.ReadBool();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 42: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserCredentials : pb::IMessage<UserCredentials> {
    private static readonly pb::MessageParser<UserCredentials> _parser = new pb::MessageParser<UserCredentials>(() => new UserCredentials());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCredentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCredentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCredentials(UserCredentials other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCredentials Clone() {
      return new UserCredentials(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCredentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCredentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCredentials other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      commitPosition_ = other.commitPosition_;
      preparePosition_ = other.preparePosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "commit_position" field.</summary>
    public const int CommitPositionFieldNumber = 1;
    private long commitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitPosition {
      get { return commitPosition_; }
      set {
        commitPosition_ = value;
      }
    }

    /// <summary>Field number for the "prepare_position" field.</summary>
    public const int PreparePositionFieldNumber = 2;
    private long preparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreparePosition {
      get { return preparePosition_; }
      set {
        preparePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommitPosition != other.CommitPosition) return false;
      if (PreparePosition != other.PreparePosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommitPosition != 0L) hash ^= CommitPosition.GetHashCode();
      if (PreparePosition != 0L) hash ^= PreparePosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommitPosition != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommitPosition);
      }
      if (PreparePosition != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PreparePosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitPosition);
      }
      if (PreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreparePosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.CommitPosition != 0L) {
        CommitPosition = other.CommitPosition;
      }
      if (other.PreparePosition != 0L) {
        PreparePosition = other.PreparePosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommitPosition = input.ReadInt64();
            break;
          }
          case 16: {
            PreparePosition = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      type_ = other.type_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordedEvent : pb::IMessage<RecordedEvent> {
    private static readonly pb::MessageParser<RecordedEvent> _parser = new pb::MessageParser<RecordedEvent>(() => new RecordedEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordedEvent(RecordedEvent other) : this() {
      eventStreamId_ = other.eventStreamId_;
      eventId_ = other.eventId_;
      eventNumber_ = other.eventNumber_;
      eventType_ = other.eventType_;
      data_ = other.data_;
      metadata_ = other.metadata_;
      isJson_ = other.isJson_;
      created_ = other.created_;
      createdEpoch_ = other.createdEpoch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordedEvent Clone() {
      return new RecordedEvent(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private pb::ByteString eventId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_number" field.</summary>
    public const int EventNumberFieldNumber = 3;
    private int eventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventNumber {
      get { return eventNumber_; }
      set {
        eventNumber_ = value;
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 4;
    private string eventType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_json" field.</summary>
    public const int IsJsonFieldNumber = 7;
    private bool isJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJson {
      get { return isJson_; }
      set {
        isJson_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 8;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "created_epoch" field.</summary>
    public const int CreatedEpochFieldNumber = 9;
    private long createdEpoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedEpoch {
      get { return createdEpoch_; }
      set {
        createdEpoch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (EventId != other.EventId) return false;
      if (EventNumber != other.EventNumber) return false;
      if (EventType != other.EventType) return false;
      if (Data != other.Data) return false;
      if (Metadata != other.Metadata) return false;
      if (IsJson != other.IsJson) return false;
      if (Created != other.Created) return false;
      if (CreatedEpoch != other.CreatedEpoch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (EventNumber != 0) hash ^= EventNumber.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (IsJson != false) hash ^= IsJson.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (CreatedEpoch != 0L) hash ^= CreatedEpoch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EventId);
      }
      if (EventNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventNumber);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EventType);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
      if (IsJson != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsJson);
      }
      if (Created != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Created);
      }
      if (CreatedEpoch != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CreatedEpoch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventId);
      }
      if (EventNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventNumber);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (IsJson != false) {
        size += 1 + 1;
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (CreatedEpoch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedEpoch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordedEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.EventNumber != 0) {
        EventNumber = other.EventNumber;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.IsJson != false) {
        IsJson = other.IsJson;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.CreatedEpoch != 0L) {
        CreatedEpoch = other.CreatedEpoch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 18: {
            EventId = input.ReadBytes();
            break;
          }
          case 24: {
            EventNumber = input.ReadInt32();
            break;
          }
          case 34: {
            EventType = input.ReadString();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
          case 56: {
            IsJson = input.ReadBool();
            break;
          }
          case 64: {
            Created = input.ReadInt64();
            break;
          }
          case 72: {
            CreatedEpoch = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResolvedEvent : pb::IMessage<ResolvedEvent> {
    private static readonly pb::MessageParser<ResolvedEvent> _parser = new pb::MessageParser<ResolvedEvent>(() => new ResolvedEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolvedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent(ResolvedEvent other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent Clone() {
      return new ResolvedEvent(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.RPC.RecordedEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.RecordedEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::EventStore.RPC.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.RPC.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolvedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolvedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolvedEvent other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.RPC.RecordedEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::EventStore.RPC.Position();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.RPC.RecordedEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::EventStore.RPC.Position();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
