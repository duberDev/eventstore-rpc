// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_store.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace EventStore.RPC {
  public static partial class EventStore
  {
    static readonly string __ServiceName = "eventstore.EventStore";

    static readonly Marshaller<global::EventStore.RPC.AppendToStreamRequest> __Marshaller_AppendToStreamRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EventStore.RPC.AppendToStreamRequest.Parser.ParseFrom);
    static readonly Marshaller<global::EventStore.RPC.AppendToStreamResponse> __Marshaller_AppendToStreamResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EventStore.RPC.AppendToStreamResponse.Parser.ParseFrom);
    static readonly Marshaller<global::EventStore.RPC.SubscribeToStreamFromRequest> __Marshaller_SubscribeToStreamFromRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EventStore.RPC.SubscribeToStreamFromRequest.Parser.ParseFrom);
    static readonly Marshaller<global::EventStore.RPC.SubscribeToStreamFromResponse> __Marshaller_SubscribeToStreamFromResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EventStore.RPC.SubscribeToStreamFromResponse.Parser.ParseFrom);

    static readonly Method<global::EventStore.RPC.AppendToStreamRequest, global::EventStore.RPC.AppendToStreamResponse> __Method_AppendToStream = new Method<global::EventStore.RPC.AppendToStreamRequest, global::EventStore.RPC.AppendToStreamResponse>(
        MethodType.Unary,
        __ServiceName,
        "AppendToStream",
        __Marshaller_AppendToStreamRequest,
        __Marshaller_AppendToStreamResponse);

    static readonly Method<global::EventStore.RPC.SubscribeToStreamFromRequest, global::EventStore.RPC.SubscribeToStreamFromResponse> __Method_SubscribeToStreamFrom = new Method<global::EventStore.RPC.SubscribeToStreamFromRequest, global::EventStore.RPC.SubscribeToStreamFromResponse>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "SubscribeToStreamFrom",
        __Marshaller_SubscribeToStreamFromRequest,
        __Marshaller_SubscribeToStreamFromResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EventStore.RPC.EventStoreReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of EventStore</summary>
    public abstract partial class EventStoreBase
    {
      public virtual global::System.Threading.Tasks.Task<global::EventStore.RPC.AppendToStreamResponse> AppendToStream(global::EventStore.RPC.AppendToStreamRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeToStreamFrom(IAsyncStreamReader<global::EventStore.RPC.SubscribeToStreamFromRequest> requestStream, IServerStreamWriter<global::EventStore.RPC.SubscribeToStreamFromResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EventStore</summary>
    public partial class EventStoreClient : ClientBase<EventStoreClient>
    {
      /// <summary>Creates a new client for EventStore</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EventStoreClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EventStore that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EventStoreClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EventStoreClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EventStoreClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::EventStore.RPC.AppendToStreamResponse AppendToStream(global::EventStore.RPC.AppendToStreamRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AppendToStream(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::EventStore.RPC.AppendToStreamResponse AppendToStream(global::EventStore.RPC.AppendToStreamRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AppendToStream, null, options, request);
      }
      public virtual AsyncUnaryCall<global::EventStore.RPC.AppendToStreamResponse> AppendToStreamAsync(global::EventStore.RPC.AppendToStreamRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AppendToStreamAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::EventStore.RPC.AppendToStreamResponse> AppendToStreamAsync(global::EventStore.RPC.AppendToStreamRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AppendToStream, null, options, request);
      }
      public virtual AsyncDuplexStreamingCall<global::EventStore.RPC.SubscribeToStreamFromRequest, global::EventStore.RPC.SubscribeToStreamFromResponse> SubscribeToStreamFrom(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubscribeToStreamFrom(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::EventStore.RPC.SubscribeToStreamFromRequest, global::EventStore.RPC.SubscribeToStreamFromResponse> SubscribeToStreamFrom(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SubscribeToStreamFrom, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EventStoreClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EventStoreClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(EventStoreBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AppendToStream, serviceImpl.AppendToStream)
          .AddMethod(__Method_SubscribeToStreamFrom, serviceImpl.SubscribeToStreamFrom).Build();
    }

  }
}
#endregion
